#!/bin/bash


source <INCLUDE>
source <CHECKOLD>

createtodo() {

    local doneindices=`cut -d" " -f1 $donefile | sort -n`

    # add 1 to total_commands to reflect eof
    let "indices_size=$num_commands+1"
   
    # create array of size #commandsfile and initialize to 0
    declare -a command_indices=( $(for i in `seq 1 $indices_size` ; do echo 0; done) )

    # iterate over the done indices and mark every command_indices with index in doneindices
    for next_done in $doneindices; do
	command_indices[${next_done}]=1
    done 

    # read all the commands, if command_indices for that line is not marked it means
    # the command was not executed, so add to todo lies
    counter=1

    local nodeid=1
    #touch ${todofile}.${nodeid}

    while read next_command; do
	if [ ${command_indices[$counter]} -eq 0 ]; then
	    echo "${counter}:${next_command}" >> ${todofile}.${nodeid}
	    if [ ${nodeid} -eq ${num_nodes} ]; then
		nodeid=1
            else
		let "nodeid++"
            fi
	fi
	let "counter++"
    done < $commandsfile
}

setupenv() {
    logdir=$1
    mkdir -p ${logdir}
    if [ "$#" -eq 2 ]; then
	cp $2 ${logdir}/commands
	cp $2 ${logdir}/
    else
	touch ${logdir}/commands
    fi
    touch ${logdir}/log.dummy

    # create/update the done file
    cat ${logdir}/log.* >> ${logdir}/done
    rm -f ${logdir}/log.*

    # create file containing indices of all done commands.
    wc -l ${logdir}/commands | cut -d' ' -f1 > ${logdir}/done.indices
    cut -d':' -f1 ${logdir}/done | sort -nu >> ${logdir}/done.indices

    # create dummy file again. Used to make sure there always is log.* file 
    touch ${logdir}/log.dummy

    # remove the todo file from previous runs
    rm -rf ${logdir}/todo*
}

showversion() {
    echo "Version <VERSION>"
}

showstatus() {
    file=$1
    if [  -f $file ]; then
	id=`md5sum $file | cut -d" " -f1`
        logdir=${TAMULAUNCHER_DIR}/${id}
        if [ -d "${logdir}" ]; then
            setupenv $logdir

	    local totalc=`wc -l ${logdir}/commands | cut -d" " -f1`
	    local donec=`cat ${logdir}/done ${logdir}/log* | wc -l`
            echo "Total number of commands: ${totalc}, number of commands finished: ${donec}"
            echo
        else
            echo "No log directory found."
            echo
        fi
    else
        echo "no commands file $file found in current directory"
    fi
}

showlist() {
    file=$1
    if [  -f $file ]; then
	id=`md5sum $file | cut -d" " -f1`
	logdir=${TAMULAUNCHER_DIR}/${id}
	if [ -d "${logdir}" ]; then
	    setupenv $logdir
	    cat ${logdir}/done ${logdir}/log* | sort -n
	else
	    echo "No log directory found."
	    echo
	fi
    else
	echo "no commands file $file found in current directory"
    fi
}


removelogs() {
    file=$1
    if [  -f $file ]; then
        id=`md5sum $file | cut -d" " -f1`
	logdir=${TAMULAUNCHER_DIR}/${id}
	if [ -d "${logdir}" ]; then
	    rm -rf "${logdir}"
	    echo "tamu launcher log files have been removed."
        else
            echo "No log directory found."
            echo
        fi
    else
        echo "no commands file $file found in current directory"
    fi
}
 

# make sure #commands per node requested is number and 
#  matches reserved cores per node   
check_pernode() {
    if [[ $PERNODE != ${PERNODE//[^0-9]/} ]]; then
        #check if PERNODE is a numeric value
        echo "ERROR: Value of -p should be numeric value between 0 and $maxppn"
        echo "Exiting now..."
        exit 1
    fi
}

usage()
{
cat <<EOF
Usage: $0 [options] FILE

This script will execute commands in FILE concurrently. 

OPTIONS:

  --commands-pernode | -p <n> 
         Set the number of concurrent processes per node.

  --norestart
         Do not restart.

  --status <commands file>
         Prints number of finished commands and exits.  

  --list <commands file>
         Prints detailed list of all finished commands and exits.
  
  --remove-logs <commands file>
         Removes the log directory and exits

  --version | -v
         Prints version and exits.

  --help | -h | ?
         Shows this message and exits.

EOF
}


TAMULAUNCHER_DIR=".tamulauncher-log"

maxtasks=10000

date=`date`
user=`whoami`
restart=0

batch_jobid=$(get_job_id)

PERNODE=0

# read in the input parameters
numargs=$#
counter=1

while [ $counter -le $numargs ]; do
    case $1 in
        "--commands-pernode")
            # shift the argument list to get the next element
            let "counter=$counter+1"
            shift
            PERNODE=$1
            check_pernode
            ;;
	
        "-p")
            # shift the argument list to get the next element
            let "counter=$counter+1"
            shift
            PERNODE=$1
            check_pernode
            ;;

	"--norestart")
	    restart=-1
	    ;;

	"--status")
	    # shows the current status, how many commands done 
	    let "counter=$counter+1"
            shift
            id=$1
	    showstatus $id
	    exit 0
	    ;;

        "--list")
            # lists all done  commands
            let "counter=$counter+1"
            shift
            id=$1 
            showlist $id
            exit 0
            ;;
	"--remove-logs")
	    let "counter=$counter+1"
            shift
            id=$1
	    removelogs $id
	    exit 0
	    ;;

        "--version")
            # prints version
            showversion
            exit 0
            ;;
       "-v")
            # prints version
            showversion
            exit 0
            ;;
        "--help")
            usage
            exit 0
            ;;
        "?")
            usage
            exit 0
            ;;
        "-h")
            usage
            exit 0
            ;;
        *)
            if (( $counter == $numargs )); then
                    # last element this must be the commands file
                input=$1
            else
                echo "Warning: flag not recognized: $1"
            fi
            ;;
    esac
    
    # increase the counters
    let "counter=$counter+1"
    shift
done

#check if input file was provided
if [ -z "$input" ];
then
   echo "No input file specified. Exiting now .."
   usage
   exit 0
fi


# check if input file exists.
if [ !  -f $input ];
then
    echo "Cannot locate file $input. Exiting now..."
    exit 0
fi


# create the name of the log dir
id=`md5sum $input | cut -d" " -f1`
logdir=${TAMULAUNCHER_DIR}/${id}
commandsfile=${logdir}/commands
donefile=${logdir}/done
todofile=${logdir}/todo
num_nodes=$(get_num_nodes)


# if no restart, just remove the logdir
if (( $restart < 0 )); then
    echo "Warning: --norestart specified: removing logs."
    rm -rf ${logdir}
fi

pernodestring=""
# if PERNODE not set, set it to batch_per_node
if (( $PERNODE > 0 )); then
    pernodestring="--tasks_per_node $PERNODE"
fi


# also need to write to the LSF/SLURM mod logs
write_mod_log

# set up the directory structure and copy the commands file
setupenv $logdir ${input}


num_commands=`wc -l  $commandsfile | cut -d"." -f1`

# write to the log
#echo "${batch_jobid} : ${user} : ${date}  # ${MPISTRING}  ${logdir}   (`pwd`)" >> ${tamulauncherlog}

    
# create a task file, will be used in runcommand to
# find how many omp tasks should be started
create_node_task_files "${logdir}/node_list"


# start one process per node. Will not use mpi anymore since mpi tasks are not
# killed after finalize (might need to check if spawned tasks are killed after
# they finish). For now, will just start individual processes on all nodes.
# Only caveat is that need to start all processes in background. This script
# will monitor when all processes have finished. Once that is the case, script 
# can exit.


currentdir=`pwd`
node_list=`cat ${logdir}/node_list `

createtodo $logdir ${node_list}

done_commands=`cat ${logdir}/done ${logdir}/log* | wc -l`

if [ ${done_commands} -lt ${num_commands} ];
then
    if [ ${batch_jobid} -eq "000" ];
    then

	# in this case it's run interactively. In this case the commands will be
	# run in the foreground. If user wants to run it as a background process, 
	# can add the & themselves.
	
	# command to execute
	runcommand="${exec} --task_id 1 ${pernodestring} --dirname ${logdir}"
	${runcommand} 

    else

	# in this case it's run as a batch job. Will start a single OpenMP  process
	# on every node, each process will indepently execute a subset of the commands

	counter=1
	for node in ${node_list}
	do
	    if [ $((counter%2)) -eq 1 ];
	    then
		runcommand="${exec} --task_id ${counter} ${pernodestring} --dirname ${logdir} ; exit"
		#	echo "ssh -n $node cd $currentdir ; ${runcommand} "
		time ssh -n $node "cd $currentdir ; ${runcommand} " &
	    fi
	    let "counter++"
	done
	
	# have to check for all back ground processes to finish
	# only way when all background processes have finsihed is when
	# all commands have been executed.

	done_commands=`cat ${logdir}/done ${logdir}/log* | wc -l`
	while [ ${done_commands} -lt ${num_commands} ]; 
	do 
	    #echo "finished $done_commands out of ${num_commands}"
	    sleep 1;
	    done_commands=`cat ${logdir}/done ${logdir}/log* | wc -l`
	done
	
	echo "...All commands have been executed. Exiting now!"
    fi
else
    echo "==========================================================="
    echo "#commands: ${num_commands}, #finished commands: ${done_commands}"
    echo "All commands have been processed."
    echo "If you think this is a mistake and/or want to redo your run"
    echo "run tamulauncher with --norestart option."
    echo "==========================================================="
fi


exitcode=$?


