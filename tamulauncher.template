#!/bin/bash


source <INCLUDE>
source <CHECKOLD>

setupenv() {
    mkdir -p ${TAMULAUNCHER_DIR}
    touch ${TAMULAUNCHER_DIR}/commands
    touch ${TAMULAUNCHER_DIR}/done
    touch ${TAMULAUNCHER_DIR}/log.dummy
}

showversion() {
    echo "Version <VERSION>"
}

showlist() {
    if [ -d "${TAMULAUNCHER_DIR}" ]; then
	setupenv
       cat ${TAMULAUNCHER_DIR}/done ${TAMULAUNCHER_DIR}/log* | sort -n
    else
	echo "No log directory found. Are you in the directory tamulauncher was run from?"
	echo
    fi
}

num_total_commands() {
    local totalc=`wc -l ${TAMULAUNCHER_DIR}/commands | cut -d" " -f1`
    echo $totalc
}

num_commands_finished() {
    local donec=`cat ${TAMULAUNCHER_DIR}/done ${TAMULAUNCHER_DIR}/log* | wc -l`
    echo $donec
}

showstatus() {
    if [ -d "${TAMULAUNCHER_DIR}" ]; then
        setupenv
	local totalc=$(num_total_commands) 
	local donec=$(num_commands_finished)
	echo "Total number of commands: ${totalc}, number of commands finished: ${donec}"
	echo
   else
        echo "No log directory found. Are you in the directory tamulauncher was run from?"
	echo
    fi
}


# make sure #commands per node requested is number and 
#  matches reserved cores per node   
check_pernode() {
    if [[ $PERNODE != ${PERNODE//[^0-9]/} ]]; then
        #check if PERNODE is a numeric value
        echo "ERROR: Value of -p should be numeric value between 0 and $maxppn"
        echo "Exiting now..."
        exit 1
    fi
}


usage()
{
cat <<EOF
Usage: $0 [options] FILE

This script will execute commands in FILE concurrently. 

OPTIONS:

  --commands-pernode | -p <n> 
         Set the number of concurrent processes per node.

  --status
         Prints number of finished commands and exits.  

  --list
         Prints detailed list of all finished commands and exits.

  --version | -v
         Prints version and exits.

  --help | -h | ?
         Shows this message and exits.

EOF
}


TAMULAUNCHER_DIR=".tamulauncher-log"

maxtasks=10000

date=`date`
user=`whoami`
restart=0

batch_jobid=$(get_job_id)
batch_num_nodes=$(get_num_nodes)

PERNODE=0

# read in the input parameters
numargs=$#
counter=1

while [ $counter -le $numargs ]; do
    case $1 in
        "--commands-pernode")
            # shift the argument list to get the next element
            let "counter=$counter+1"
            shift
            PERNODE=$1
            check_pernode
            ;;
	
        "-p")
            # shift the argument list to get the next element
            let "counter=$counter+1"
            shift
            PERNODE=$1
            check_pernode
            ;;

	"--status")
	    # shows the current status, how many commands done
	    showstatus
	    exit 0
	    ;;
        "--list")
            # lists all done  commands 
            showlist
            exit 0
            ;;
       "--version")
            # prints version
            showversion
            exit 0
            ;;
       "-v")
            # prints version
            showversion
            exit 0
            ;;
        "--help")
            usage
            exit 0
            ;;
        "?")
            usage
            exit 0
            ;;
        "-h")
            usage
            exit 0
            ;;
        *)
            if (( $counter == $numargs )); then
                    # last element this must be the commands file
                input=$1
            else
                echo "Warning: option/flag not recognized: $1"
            fi
            ;;
    esac
    
    # increase the counters
    let "counter=$counter+1"
    shift
done

#check if input file was provided
if [ -z "$input" ];
then
   echo "No input file specified. Exiting now .."
   usage
   exit 0
fi

# check if input file exists.
if [ !  -f $input ];
then
    echo "Cannot locate file $input. Exiting now..."
    exit 0
fi


pernodestring=""
# if PERNODE not set, set it to batch_per_node
if (( $PERNODE > 0 )); then
    pernodestring="--tasks-per-node $PERNODE"
fi


# retrieve all the parameters
MPISTRING="<PERNODE> 1 -np ${batch_num_nodes}";

# also need to write to the LSF/SLURM mod logs
write_mod_log

# set up the directory structure and copy the commands file
setupenv
cp ${input} ${TAMULAUNCHER_DIR}/commands


# create a task file, will be used in runcommand to
# find how many omp tasks should be started
create_node_task_files ".tamulauncher-log/node_list"

# temporarily also add done commands from previous tamulauncher version
if [ -f "tamulauncher.log" ]; then
   echo "... found tamulauncher.log file from previous version."
   echo " Marking commands in this file as done. Copy of file will be"
   echo " copied to .tamulauncher-log/tamulauncher.log.old if needed"
   mv tamulauncher.log .tamulauncher-log/log.tamulauncher-old 

   # also need to add it to done list
   cp .tamulauncher-log/tamulauncher.log.old .tamulauncher-log/done.old-tamulauncher
elif [ -d "tamulauncher-log" ]; then
    # check if the current log file already contains done commands. If that is
    # the case cannot continue.
    donec=`cat ${TAMULAUNCHER_DIR}/done ${TAMULAUNCHER_DIR}/log* | wc -l`
    if (( $donec > 0 )); then
	echo "Error: a log directory with executed command has been found for the current"
	echo "       version of tamulauncher as well as for a tamulauncher-class run"
	echo "       Cannot merge them. Please address or ask for help at help@hprc.tamu.edu"
	echo "Exiting now!"
	exit 0
    fi
    output_file=$(check_classic ${input} ${TAMULAUNCHER_DIR})
    if [ ! -z "${output_file}" ]; then
	cp ${output_file} ${TAMULAUNCHER_DIR}/commands
	echo "Found Log directory from tamulauncher-classic run. Contents of original"
	echo "input file \"${input}\" has been replaced by non-executed/finished commands"
	echo "from old log. Old log directory has been moved to directory \"${TAMULAUNCHER_DIR}\"."
	echo "Original input file \"${input}\" has been renamed to \"${input}.original\""
	echo
	cp ${input} ${TAMULAUNCHER_DIR}/${input}.original
        mv ${input} ${input}.original
	mv ${output_file} ${input}
    fi
fi

# the actual run command
runcommand="${launcher} ${MPISTRING}  ${exec} ${pernodestring} ${input}"

# for log purposes, check if this is a restart
if (( $(num_commands_finished) > 0 )); then
    restart=1
fi

# write to the log
echo "${batch_jobid} : ${user} : ${date} : restart=${restart} # ${MPISTRING} ${arguments} ${input}   (`pwd`)" >> ${tamulauncherlog}




# need to set this var to make sure the -perhost option is respected, 
# when running under batch.
export I_MPI_JOB_RESPECT_PROCESS_PLACEMENT=0

# execute the command
echo ${runcommand}
${runcommand}

exitcode=$?


