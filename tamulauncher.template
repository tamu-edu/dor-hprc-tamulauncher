#!/bin/bash


source <INCLUDE>

createtodo() {

    local doneindices=`cut -d" " -f1 $donefile | sort -n`

    # add 1 to total_commands to reflect eof
    let "indices_size=$num_commands+1"
   
    # create array of size #commandsfile and initialize to 0
    declare -a command_indices=( $(for i in `seq 1 $indices_size` ; do echo 0; done) )
    node_name=(`echo ${node_list}`);

    # iterate over the done indices and mark every command_indices with index in doneindices
    for next_done in $doneindices; do
	command_indices[${next_done}]=1
    done 

    # read all the commands, if command_indices for that line is not marked it means
    # the command was not executed, so add to todo lies
    counter=1

    local nodeid=0
    local maxid=${#node_name[@]}
    #touch ${todofile}.${nodeid}

    while read next_command; do
	if [ ${command_indices[$counter]} -eq 0 ]; then
	    echo "${counter}:${next_command}" >> ${todofile}.${node_name[$nodeid]}
	    let "nodeid++"
	    if [ ${nodeid} -eq ${maxid} ]; then
		nodeid=0
            fi
	fi
	let "counter++"
    done < $commandsfile
}

setupenv() {
    mkdir -p ${logdir}
    if [ ! -f ${commandsfile} ]; then
	cp ${input} ${logdir}/
	cp ${input} ${commandsfile}
    fi

    # create/update the done file
    touch ${logdir}/log.dummy
    cat ${logdir}/log.* >> ${logdir}/done
    rm -f ${logdir}/log.*

    # create dummy file again. Used to make sure there always is log.* file 
    touch ${logdir}/log.dummy

    # remove the todo file from previous runs
    rm -f ${todofile}.* 

}

showversion() {
    echo "Version <VERSION>"
}

showstatus() {
    if [  -d $logdir ]; then
	# make sure there is a commands file and log files
	if [ -f ${commandsfile} ]; then
	    local totalc=`wc -l ${logdir}/commands | cut -d" " -f1`
	    local donec=`cat ${logdir}/done ${logdir}/log* | wc -l`
            echo "Total number of commands: ${totalc}, number of commands finished: ${donec}"
            echo
	else
	    echo "No commands file found in ${logdir}. Log might be corrupted"
	fi
    else
        echo "... log directory not found. No status to show."
    fi
}

showlist() {
    echo "logdir=${logdir}"
    if [  -d $logdir ]; then
        # make sure there is a commands file and log files
        if [ -f ${commandsfile}  ]; then
	    cat ${logdir}/done ${logdir}/log* | sort -n
        else
            echo "No commands file found in ${logdir}. Log might be corrupted"
        fi
    else
        echo "... log directory not found. No list to show."
    fi
}

removelogs() {
    if [  -d $logdir ]; then
        # make sure there is a commands file and log files
	rm -rf "${logdir}"
	echo "tamu launcher log files have been removed."
    else
        echo "... log directory not found, cannot remove."
    fi
}



checklock()
{
    if [  -d $logdir ]; then
	if [ -f ${lockfile} ]; then
	    echo "0"
	else
            touch ${lockfile}
	    echo "1"
	fi
    else
        echo "0"
    fi
}

# this function will be called whenever scripts is exiting
releaselock()
{
    echo "... exiting now, releasing lock"
    rm -f ${lockfile} >& /dev/null
}


removelock() 
{    
    if [  -d $logdir ]; then
	if [ -f ${lockfile} ]; then
	    rm -f ${lockfile}
	else
	    echo "no lock found!"
	fi
    else
        echo "... log directory not found, cannot remove."
    fi
} 


# make sure #commands per node requested is number and 
#  matches reserved cores per node   
check_pernode() {
    if [[ $PERNODE != ${PERNODE//[^0-9]/} ]]; then
        #check if PERNODE is a numeric value
        echo "ERROR: Value of -p should be numeric value between 0 and $maxppn"
        echo "Exiting now..."
        exit 1
    fi
}

usage()
{
cat <<EOF
Usage: $0 [options] FILE

This script will execute commands in FILE concurrently. 

OPTIONS:

  --commands-pernode | -p <n> 
         Set the number of concurrent processes per node.

  --norestart
         Do not restart.

  --status <commands file>
         Prints number of finished commands and exits.  

  --list <commands file>
         Prints detailed list of all finished commands and exits.
  
  --remove-logs <commands file>
         Removes the log directory and exits

  --remove-lock <commands file>
         Removes lock for this run.  

  --version | -v
         Prints version and exits.

  --help | -h | ?
         Shows this message and exits.

EOF
}


TAMULAUNCHER_DIR=".tamulauncher-log"

maxtasks=1000000

date=`date`
user=`whoami`
restart=0

batch_jobid=$(get_job_id)

PERNODE=0

flag_status=0
flag_list=0
flag_lock=0
flag_logs=0

# read in the input parameters
numargs=$#
counter=1

while [ $counter -le $numargs ]; do
    case $1 in
        "--commands-pernode")
            # shift the argument list to get the next element
            let "counter=$counter+1"
            shift
            PERNODE=$1
            check_pernode
            ;;
        "-p")
            # shift the argument list to get the next element
            let "counter=$counter+1"
            shift
            PERNODE=$1
            check_pernode
            ;;
	"--norestart")
	    restart=-1
	    ;;
	"--status")
	    # shows the current status, how many commands done 
	    flag_status=1
	    ;;
        "--list")
            # lists all done  commands
	    flag_list=1
            ;;
	"--remove-logs")
	    flag_logs=1
	    ;;
	"--remove-lock")
	    flag_lock=1
            ;;
        "--version")
            # prints version
            showversion
            exit 0
            ;;
       "-v")
            # prints version
            showversion
            exit 0
            ;;
        "--help")
            usage
            exit 0
            ;;
        "?")
            usage
            exit 0
            ;;
        "-h")
            usage
            exit 0
            ;;
        *)
            if (( $counter == $numargs )); then
                    # last element this must be the commands file
                input=$1
            else
                echo "Error: flag not recognized: $1"
		echo "...exiting!"
		exit 0
            fi
            ;;
    esac
    
    # increase the counters
    let "counter=$counter+1"
    shift
done

#check if input file was provided
if [ -z "$input" ];
then
   echo "No input file specified. Exiting now .."
   usage
   exit 0
fi


# check if input file exists.
if [ !  -f $input ];
then
    echo "Cannot locate file $input. Exiting now..."
    exit 0
fi


# create the name of the log dir
id=`md5sum $input | cut -d" " -f1`
logdir=${TAMULAUNCHER_DIR}/${id}
commandsfile=${logdir}/commands
donefile=${logdir}/done
todofile=${logdir}/todo
releasedfile=${logdir}/released
nodelistfile=${logdir}/node_list
lockfile=${logdir}/00_LOCK
releasefile=<TAMULAUNCHERBASE>/tamulauncher-src/release_script.sh

     

if [ ${flag_status} -eq 1 ]; then
    showstatus
    exit 0
fi

if [ ${flag_list} -eq 1 ]; then
    showlist
    exit 0
fi

if [ ${flag_logs} -eq 1 ]; then
    removelogs
    exit 0
fi

if [ ${flag_lock} -eq 1 ]; then
    removelock
    exit 0
fi


num_nodes=$(get_num_nodes)


# if no restart, just remove the logdir
if (( $restart < 0 )); then
    echo "Warning: --norestart specified: removing logs."
    removelogs
fi

pernodestring=""
# if PERNODE not set, set it to batch_per_node
if (( $PERNODE > 0 )); then
    pernodestring="--tasks_per_node $PERNODE"
fi


# also need to write to the LSF/SLURM mod logs
#write_mod_log

# set up the directory structure and copy the commands file
setupenv 

# set the lock
lockresult=$(checklock)
if [ ${lockresult} -eq 0 ]; then
    echo "Error: Lock found at ${lockfile}."
    echo "Another tamulauncher run might be processing the same commands. If you"
    echo "think this is a mistake, remove the lock using the --remove_lock flag."
    exit 0
fi

# next is to set a trap handler.Whenever the script exits the lock will be released
trap releaselock EXIT ERR

num_commands=`wc -l  $commandsfile | cut -d"." -f1`

    
# create a task file, will be used in runcommand to
# find how many omp tasks should be started
create_node_task_files "${nodelistfile}"


# start one process per node. Will not use mpi anymore since mpi tasks are not
# killed after finalize (might need to check if spawned tasks are killed after
# they finish). For now, will just start individual processes on all nodes.
# Only caveat is that need to start all processes in background. This script
# will monitor when all processes have finished. Once that is the case, script 
# can exit.


currentdir=`pwd`

node_list=`sed -n 1~2p ${nodelistfile}`
node_list=$(echo $node_list|tr -d '\n')


createtodo 

# set cluster specifc environment, right now only used for slurm
set_cluster_specific_env

done_commands=`cat ${logdir}/done ${logdir}/log* | wc -l`



MPISTRING="<PERNODE> 1 -np ${num_nodes}"
# write to the log
tpn=${PERNODE}
if [ $tpn -eq 0 ]; then
    tpn=1
fi
echo "${batch_jobid} : ${user} : ${date}  # num_commands=${num_commands}, num_nodes=${num_nodes}, tasks_per_node=${tpn} #  ${logdir}   (`pwd`)" >> ${tamulauncherlog}



echo "done_commands=${done_commands}, num_commands=${num_commands}"
if [ ${done_commands} -lt ${num_commands} ];
then
    if [ ${batch_jobid} -eq "000" ];
    then
	# in this case it's run interactively. commands will be run in
	# the foreground. If user wants to run it as a background process, 
	# can add the & themselves.
	
	# command to execute
	runcommand="${exec} ${pernodestring} --dirname ${logdir} "
	${runcommand} 

    else
	# in this case it's run as a batch job. Will start a single OpenMP  process
	# on every node, each process will indepently execute a subset of the commands

	# first start a background process that periodically releases cores
        # that are not being used any more

	export TAMULAUNCHERHOST=`hostname`
	runcommand="${exec} ${pernodestring} --dirname ${logdir} --releasescript ${releasefile}"
	#echo "srun --ntasks=${num_nodes} --ntasks-per-node 1 ${runcommand}"
	#srun  --ntasks ${num_nodes} --ntasks-per-node 1 ${runcommand} 
	echo "${launcher} ${tasksflag} ${num_nodes} ${taskspernodeflag} 1 ${runcommand}"
	${launcher} ${tasksflag} ${num_nodes} ${taskspernodeflag} 1 ${runcommand}
	hn=`hostname`
	echo "${hn}: ...All commands have been executed. Exiting now!"
    fi
else
    echo "==========================================================="
    echo "#commands: ${num_commands}, #finished commands: ${done_commands}"
    echo "All commands have been processed."
    echo "If you think this is a mistake and/or want to redo your run"
    echo "run tamulauncher with --norestart option."
    echo "==========================================================="
fi






